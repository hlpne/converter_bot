import telebot
from config import TOKEN
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
from extensions import APIException, CurrencyConverter

bot = telebot.TeleBot(TOKEN)

CURRENCIES = {
    "USD": "–∞–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–π –¥–æ–ª–ª–∞—Ä",
    "EUR": "–µ–≤—Ä–æ",
    "RUB": "—Ä–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å"
}

user_data = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –≤–∞–ª—é—Ç–∞–º–∏
def currency_keyboard():
    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for currency in CURRENCIES.keys():
        markup.add(KeyboardButton(currency))
    return markup

@bot.message_handler(commands=["start", "help"])
def send_welcome(message):
    text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç üí∞\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –æ–±–º–µ–Ω—è—Ç—å:"
    )
    bot.send_message(message.chat.id, text, reply_markup=currency_keyboard())
    user_data[message.chat.id] = {}

@bot.message_handler(commands=["values"])
def values(message):
    text = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–ª—é—Ç—ã:\n" + "\n".join(f"{k} - {v}" for k, v in CURRENCIES.items())
    bot.send_message(message.chat.id, text)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –±–∞–∑–æ–≤–æ–π –≤–∞–ª—é—Ç—ã
@bot.message_handler(func=lambda message: message.chat.id not in user_data or "base" not in user_data[message.chat.id])
def choose_base_currency(message):
    chat_id = message.chat.id
    if message.text not in CURRENCIES:
        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –∏–∑ —Å–ø–∏—Å–∫–∞!", reply_markup=currency_keyboard())
        return

    user_data[chat_id] = {"base": message.text}
    bot.send_message(chat_id, "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É, –≤ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏:", reply_markup=currency_keyboard())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã –ø–µ—Ä–µ–≤–æ–¥–∞
@bot.message_handler(func=lambda message: "base" in user_data.get(message.chat.id, {}) and "quote" not in user_data[message.chat.id])
def choose_quote_currency(message):
    chat_id = message.chat.id
    if message.text not in CURRENCIES:
        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –∏–∑ —Å–ø–∏—Å–∫–∞!", reply_markup=currency_keyboard())
        return

    user_data[chat_id]["quote"] = message.text

    if user_data[chat_id]["quote"] == user_data[chat_id]["base"]:
        bot.send_message(chat_id, "–ë–∞–∑–æ–≤–∞—è –∏ —Ü–µ–ª–µ–≤–∞—è –≤–∞–ª—é—Ç–∞ –Ω–µ –º–æ–≥—É—Ç —Å–æ–≤–ø–∞–¥–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é.", reply_markup=currency_keyboard())
        del user_data[chat_id]["quote"]
        return

    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–ª—é—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 100):")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏ —Ä–∞—Å—á—ë—Ç –∫—É—Ä—Å–∞
@bot.message_handler(func=lambda message: "quote" in user_data.get(message.chat.id, {}))
def get_amount(message):
    chat_id = message.chat.id
    try:
        amount = float(message.text)
        base = user_data[chat_id]["base"]
        quote = user_data[chat_id]["quote"]
        result = CurrencyConverter.get_price(base, quote, amount)
        bot.send_message(chat_id, result)
    except ValueError:
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!")
        return
    except APIException as e:
        bot.send_message(chat_id, f"–û—à–∏–±–∫–∞: {e}")
        return

    # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–∞—Å—á—ë—Ç–∞
    user_data.pop(chat_id, None)
    bot.send_message(chat_id, "–•–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –Ω–æ–≤—ã–π —Ä–∞—Å—á—ë—Ç? –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –æ–±–º–µ–Ω–∞:", reply_markup=currency_keyboard())

bot.polling()